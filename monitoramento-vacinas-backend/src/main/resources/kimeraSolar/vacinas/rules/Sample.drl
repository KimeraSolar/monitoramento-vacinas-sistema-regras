package kimeraSolar.vacinas.rules

import kimeraSolar.vacinas.domain.Vacina;
import kimeraSolar.vacinas.domain.Eventos.*;
import kimeraSolar.vacinas.domain.Camara;
import java.util.Date;
import java.lang.Math;

declare LeituraTemperatura
	@role( event )
	@timestamp( inicio )
end

/* ================================================= Regras para verificar perigo ================================================= 
	Caso a temperatura de uma câmara de vacina chegue perto dos limites dos
		parâmetros, deve-se notificar os gestores. */

declare Perigo
	@role( event )
	@timestamp( inicio )
	@duration( duration )
end

rule "temperatura perto dos limites"
when
	$vacina : Vacina( descartada == false )
	$camara : Camara( vacinas contains $vacina, $temp : temp, ( $temp - $vacina.getTipo().getTempMin() < 1 && > 0 ) || ( $vacina.getTipo().getTempMax() - $temp < 1 && > 0) )
	not (exists ( Perigo( $vacina == vacina, ativo == true) ) )
then
	insert(new Perigo( $camara, $vacina, $temp, true, new Date()) );
	System.out.println("Temperatura perto dos limites da vacina " + $vacina.getTipo().getNome() +": " + $camara.getObjectId() + " " + $temp + "ºC.");
	$camara.sendMessage("A Câmara " + $camara.getObjectId() + " está com temperatura " + $temp + "ºC muito perto dos limites para a vacina " + $vacina.getTipo().getNome() + "."); 
end

rule "fora de perigo"
when
	$vacina : Vacina( descartada == false )
	$camara : Camara( vacinas contains $vacina, $temp : temp, ( $temp - $vacina.getTipo().getTempMin() > 1 ) && ( $vacina.getTipo().getTempMax() - $temp > 1) )
	$perigo : Perigo( $vacina == vacina, $inicio : inicio, ativo == true)
then
	$perigo.setAtivo( false );
	$perigo.setDuration( System.currentTimeMillis() - $inicio.getTime() );
	update( $perigo );
	System.out.println("Temperatura normalizada para vacina " + $vacina.getTipo().getNome() +": " + $camara.getObjectId() + " " + $temp + "ºC.");
	$camara.sendMessage("A Câmara " + $camara.getObjectId() + " está com temperatura " + $temp + " fora de perigo para a vacina " + $vacina.getTipo().getNome() + ".");
end

/* ================================================= Regras para verificar temperatura fora da faixa apropriada ================================================= 
	Caso a temperatura de uma câmara de vacina passe dos limites dos
		parâmetros, deve-se chamar o gestor mais próximo ao local. */
		
declare Alerta
	@role( event )
	@timestamp( inicio )
	@duration( duration )
end

rule "temperatura fora do apropriado"
when
	$vacina : Vacina( descartada == false )
	$camara : Camara( vacinas contains $vacina, $temp : temp, ( $temp < $vacina.getTipo().getTempMin() ) || ( $temp > $vacina.getTipo().getTempMax() ) )
	not ( exists ( Alerta( $vacina == vacina, ativo == true ) ) )
then
	insert ( new Alerta($camara, $vacina, $camara.gerenteMaisProx(), $temp, true, new Date()) );
	System.out.println("Temperatura fora dos limites para vacina " + $vacina.getTipo().getNome() +": " + $camara.getObjectId() + " " + $temp + "ºC.");
	$camara.gerenteMaisProx().sendMensagem(	"Alerta na Câmara " + $camara.getObjectId() + " com temperatura " + $temp + " fora dos limites para a vacina " + $vacina.getTipo().getNome() +
							". Favor comparecer no local " + $camara.getLocal() + " imediatamente.");
end

rule "temperatura apropriada"
when
	$vacina : Vacina( descartada == false )
	$camara : Camara( vacinas contains $vacina, $temp : temp, ( $temp > $vacina.getTipo().getTempMin() ) && ( $temp < $vacina.getTipo().getTempMax() ) )
	$alerta : Alerta( $vacina == vacina, $inicio : inicio, $gerente : gerente, ativo == true)
then
	$alerta.setAtivo(false);
	$alerta.setDuration( System.currentTimeMillis() - $inicio.getTime() );
	update( $alerta );
	System.out.println("Temperatura dentro dos limites para vacina " + $vacina.getTipo().getNome() +": " + $camara.getObjectId() + " " + $temp + "ºC.");
	$gerente.sendMensagem("A Câmara " + $camara.getObjectId() + " está com temperatura " + $temp + " fora de alerta para a vacina " + $vacina.getTipo().getNome() + ".");
end

/* ================================================= Regras para sugerir descarte ================================================= 
	Caso a temperatura de uma câmara de vacina fique fora dos limites dos
		parâmetros definidos durante um certo intervalo de tempo (a ser definido), o
		sistema deve sugerir o descarte do produto. */
		
declare Descarte
	@role( event )
	@timestamp ( timestamp )
end

rule "sugerir descarte"
when
	$vacina : Vacina( descartada == false )
	$camara : Camara( vacinas contains $vacina )
	$alerta : Alerta ( $vacina == vacina, $gerente : gerente, ativo == true, $inicio : inicio)
	eval ((System.currentTimeMillis() - $inicio.getTime()) > $vacina.getTipo().getTempoDescarte())
	not (exists (Descarte($alerta == alerta) ) )
then
	insert ( new Descarte($alerta, new Date()) );
	$vacina.setDescartada(true);
	update($vacina);
	System.out.println("Descarte sugerido para vacina " + $vacina.getTipo().getNome() + ": " +  $camara.getObjectId() + ".");
	$gerente.sendMensagem("Tempo de alerta excedido, descarte sugerido para vacina " + $vacina.getTipo().getNome() + " na câmara " + $camara.getObjectId() + ".");
end

/* ================================================= Regras para sugerir manutenção de Camaras ================================================= 
	Caso haja muitos casos de eventos de Perigo em um curto intervalo de tempo,
		o sistema deve sugerir manutenção da camara. */
		
declare ManutencaoNecessaria
	camara : Camara
	ativo : boolean
end
		
rule "Sugerir manutenção na camara"
when
	$camara : Camara( ativa == true )
	$casosPerigo : Number() from accumulate(
		$p : Perigo ( $camara == camara ) over window:time( 1m ),
		count( $p )
	)
	$casosAlerta : Number() from accumulate(
		$a : Alerta ( $camara == camara ) over window:time( 1m ),
		count( $a )
	)
	eval($casosPerigo.intValue() + $casosAlerta.intValue() >= 3)
	not( exists( ManutencaoNecessaria( $camara == camara, ativo == true ) ) )
then
	insert(new ManutencaoNecessaria( $camara, true ) );
	System.out.println("Manutenção sugerida: "  + $camara.getObjectId() + " após " + ($casosPerigo.intValue() + $casosAlerta.intValue()) + " casos de perigo e/ou alerta nos últimos 1m.");
	$camara.sendMessage("Manutenção sugerida na unidade " + $camara.getObjectId() + " após " + ($casosPerigo.intValue() + $casosAlerta.intValue()) + " casos de perigo e/ou alerta nos últimos 1m.");
end

rule "Sem necessidade de manutenção"
when
	$camara : Camara( ativa == true )
	$casosPerigo : Number() from accumulate(
		$p : Perigo ( $camara == camara ) over window:time( 1m ),
		count( $p )
	)
	$casosAlerta : Number() from accumulate(
		$a : Alerta ( $camara == camara ) over window:time( 1m ),
		count( $a )
	)
	eval($casosPerigo.intValue() + $casosAlerta.intValue() < 3)
	$manutencao : ManutencaoNecessaria( $camara == camara, ativo == true )
then
	$manutencao.setAtivo( false );
	update($manutencao);
	System.out.println("Sem necessidade de manutenção na unidade " + $camara.getObjectId() + " após " + ($casosPerigo.intValue() + $casosAlerta.intValue()) + " casos de perigo e/ou alerta nos últimos 1m.");
	$camara.sendMessage("Sem necessidade de manutenção na unidade " + $camara.getObjectId() + " após " + ($casosPerigo.intValue() + $casosAlerta.intValue()) + " casos de perigo e/ou alerta nos últimos 1m.");
end

/* ================================================= Regras para identificar variações bruscas de temperatura ================================================= 
	Identificar caso haja uma variação muito brusca de temperatura. */
	
declare VariacaoBruscaTemp
	@role( event )
	
	camara : Camara
	tempInicial : LeituraTemperatura
	tempFinal : LeituraTemperatura

end

rule "Houve variação brusca de temperatura"
when
	$tempFinal : LeituraTemperatura( $tempF : temp, $camara : camara ) over window:length(10)
	$tempInicial : LeituraTemperatura( $tempI : temp, $camara == camara, this before[0s, 10s] $tempFinal )
	eval(Math.abs($tempF - $tempI) > 5)
	not( exists ( VariacaoBruscaTemp( $tempFinal == tempFinal, $tempInicial == tempInicial ) ) )
then
	insert( new VariacaoBruscaTemp( $camara, $tempInicial, $tempFinal ) );
	System.out.println("Variação brusca de temperatura na câmara " + $camara.getObjectId() + " com variação de " + ($tempF - $tempI) + " em menos de 10s.");
	$camara.sendMessage("Variação brusca de temperatura na câmara " + $camara.getObjectId() + " com variação de " + ($tempF - $tempI) + " em menos de 10s."); 
end


/* ================================================= Regras para sugerir manutenção de Sensores ================================================= 
	Caso haja muitos casos de Mudanças Bruscas de Temperatura em um curto intervalo de tempo,
		o sistema deve sugerir manutenção dos sensores. */

declare ManutencaoNecessariaSensores
	camara : Camara
	ativo : boolean
end

rule "Sugerir manutenção nos sensores"
when
	$camara : Camara( ativa == true )
	$casosVariacaoBrusca : Number() from accumulate(
		$v : VariacaoBruscaTemp( $camara == camara ) over window:time( 1m ),
		count( $v )
	)
	eval( $casosVariacaoBrusca.intValue() >= 10 )
	not( exists( ManutencaoNecessariaSensores( $camara == camara, ativo == true ) ) )
then
	insert(new ManutencaoNecessariaSensores( $camara, true ) );
	System.out.println("Manutenção sugerida nos sensores da unidade " + $camara.getObjectId() + " após " + $casosVariacaoBrusca.intValue() + " casos de variação brusca de temperatura em 1m.");
	$camara.sendMessage("Manutenção sugerida nos sensores da unidade " + $camara.getObjectId() + " após " + $casosVariacaoBrusca.intValue() + " casos de variação brusca de temperatura em 1m.");
end

rule "Sem necessidade de manutenção nos sensores"
when
	$camara : Camara( ativa == true )
	$casosVariacaoBrusca : Number() from accumulate(
		$v : VariacaoBruscaTemp( $camara == camara ) over window:time( 1m ),
		count( $v )
	)
	eval($casosVariacaoBrusca.intValue() < 10)
	$manutencao : ManutencaoNecessariaSensores( $camara == camara, ativo == true )
then
	$manutencao.setAtivo( false );
	update($manutencao);
	System.out.println("Sem necessidade de manutenção dos sensores na unidade " + $camara.getObjectId() + " após " + $casosVariacaoBrusca.intValue() + " casos de variação brusca de temperatura nos últimos 1m.");
	$camara.sendMessage("Sem necessidade de manutenção dos sensores na unidade " + $camara.getObjectId() + " após " + $casosVariacaoBrusca.intValue() + " casos de variação brusca de temperatura nos últimos 1m.");
end